plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
	accessWidenerPath.set(file("src/main/resources/markdown_chat.accesswidener"))
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation fabricApi.module("fabric-api-base", project.fabric_api_version)
	modImplementation fabricApi.module("fabric-message-api-v1", project.fabric_api_version)

	include(implementation('org.commonmark:commonmark:0.18.1'))

	include(implementation('org.commonmark:commonmark-ext-autolink:0.18.1'))
	include 'org.nibor.autolink:autolink:0.10.0'

	include(implementation('org.commonmark:commonmark-ext-gfm-strikethrough:0.18.1'))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
	it.options.encoding = "UTF-8"
	it.options.release.set(17)
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archivesBaseName
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		def env = System.getenv()
		if (env.MAVEN_URL) {
			maven {
				credentials {
					username env.MAVEN_USERNAME
					password env.MAVEN_PASSWORD
				}
				url env.MAVEN_URL
			}
		} else {
			mavenLocal()
		}
	}
}
